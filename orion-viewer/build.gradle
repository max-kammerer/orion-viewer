apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: '../project.gradle'

project.ext {
    Properties properties = new Properties()
    def propertiesFile = file('version.properties')
    properties.load(propertiesFile.newDataInputStream())
    orionVersionCode = properties.getProperty("orion.version.code").toInteger()
    orionVersionName = properties.getProperty("orion.version.name")
    doSigning = file("signing.gradle").exists()
    println "do signing: " + doSigning
    if (doSigning) {
        apply from: 'signing.gradle'
    }
    ext.abiCodes = ['armeabi-v7a':1, x86:2, x86_64:3, 'arm64-v8a':4]
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.preference:preference-ktx:1.2.1'
    //tab layout
    implementation 'com.google.android.material:material:1.11.0'
    implementation project(':tree-view-list-android')
    implementation("androidx.recyclerview:recyclerview:1.2.1")
    implementation("androidx.core:core-ktx:1.12.0")


    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'
    implementation project(":nativeLibs:djvuModule")
    implementation project(":nativeLibs:mupdfModule")


    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test:core:1.5.0'
    androidTestImplementation 'androidx.test:core-ktx:1.5.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.5'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'

    //MPP test workaround
    implementation project(":common")
}

android {
    if (orionNdkVersion != null) {
        ndkVersion orionNdkVersion
    }
    compileSdkVersion = orionCompileSdk
    buildToolsVersion = orionBuildToolsVersion

    def githubBuildNumber = (System.getenv("GITHUB_RUN_NUMBER") ?: "1").toInteger()

    defaultConfig {
        versionCode = orionVersionCode
        versionName = orionVersionName

        minSdkVersion orionMinSdk
        if (isAndroid40Build) {
            maxSdkVersion = 15
        }
        targetSdkVersion orionTargetSdk


        applicationId "universe.constellation.orion.viewer"
        testApplicationId "universe.constellation.orion.viewer.test"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        if (isCIBuild) {
            archivesBaseName = "orion-viewer-$versionName-$githubBuildNumber"
        } else {
            archivesBaseName = "orion-viewer-$versionName" + (isAndroid40Build ? "-android40" : "")
        }
    }

    sourceSets {
        main {
            java {
                srcDirs += "../nativeLibs/mupdf/platform/java/src"

                if (onyxSdkPath != null) {
                    srcDirs += onyxSdkPath + "/src/main/java/"
                }
            }

        }

        androidTest {
            java.srcDirs += 'src/androidTest/kotlin'
            resources.srcDirs += 'src/androidTest/assets'
        }
    }

    buildTypes {
        release {
            if (doSigning) {
                signingConfig signingConfigs.release
            }
        }
    }

    splits {
        abi {
            enable true
            universalApk false
        }
    }

    // make per-variant version code
    android.applicationVariants.configureEach { variant ->
        variant.outputs.each { output ->
            def filter = output.getFilter(com.android.build.OutputFile.ABI)
            output.versionCodeOverride = project.ext.abiCodes.get(filter) + variant.versionCode
            println "New version code for " + variant.buildType.name + "/" + filter + " is " + output.versionCodeOverride
        }
    }

    lintOptions { abortOnError false }

    packagingOptions {
        exclude 'META-INF/main.kotlin_module'
    }
}

kotlin {
    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                implementation project(":common")
            }
        }

//        linuxAppMain {
//            dependencies {
//                implementation 'org.jetbrains.kotlin:kotlin-stdlib-native'
//            }
//
//            kotlin.srcDir('../native/src/main')
//        }

    }

//    targets {
//        fromPreset(presets.android, 'androidApp') {
//
//        }
////        fromPreset(presets.linuxX64, 'linuxApp') {
////            compilations.main {
////                cinterops {
////                    interopName {
////                         defFile "../native/src/main/c_interop/gtk3.def"
////                    }
////                }
////            }
////        }
//    }
}

tasks.register('downloadTestFiles') {
    doFirst {
        testFiles.forEach {
            def name = it.tokenize('/').last()
            def fileName = project.rootDir.path + "/orion-viewer/src/androidTest/assets/testData/" + name
            def file = new File(fileName)
            if (!file.exists()) {
                println "Downloading " + it + " into " + file.absolutePath
                new URL(it).withInputStream { i -> file.withOutputStream { it << i } }
            }
        }
    }
}

tasks.register('uploadTestData') {
    doLast {
        exec {
            commandLine(androidComponents.sdkComponents.adb.get(), "push", "--sync", "src/androidTest/assets/testData/", "/sdcard/Download/orion")
        }
    }
}

afterEvaluate {
    connectedDebugAndroidTest.dependsOn 'uploadTestData'
}
